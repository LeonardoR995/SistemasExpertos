import tkinter as tk

# Funci√≥n para generar el √°rbol sem√°ntico seg√∫n las nuevas reglas

def generar_arbol_semantico(formula):
    # Conjunci√≥n (ùõº ‚àß ùõΩ) - Una sola rama vertical
    if '‚àß' in formula:
        operadores = formula.split('‚àß')     
        izquierda = operadores[0].strip(),operadores[1].strip()
        derecha = operadores[1].strip()
        # Para la conjunci√≥n, retornamos una √∫nica rama vertical
        return ('AND', izquierda, derecha)

    # Disyunci√≥n (ùõº ‚à® ùõΩ) - Dos ramas
    elif '‚à®' in formula:
        operadores = formula.split('‚à®')
        izquierda = operadores[0].strip()
        derecha = operadores[1].strip()
        return ('OR', izquierda, derecha)

    # Negaci√≥n de Conjunci√≥n (¬¨(ùõº ‚àß ùõΩ)) -> ¬¨ùõº ‚à® ¬¨ùõΩ - Dos ramas
    elif '¬¨(' in formula and '‚àß' in formula:
        formula_inner = formula[2:-1]  # Eliminar ¬¨( )
        operadores = formula_inner.split('‚àß')
        izquierda = '¬¨' + operadores[0].strip()
        derecha = '¬¨' + operadores[1].strip()
        return ('OR', izquierda, derecha)

    # Negaci√≥n de Disyunci√≥n (¬¨(ùõº ‚à® ùõΩ)) -> ¬¨ùõº ‚àß ¬¨ùõΩ - Una sola rama vertical
    elif '¬¨(' in formula and '‚à®' in formula:
        formula_inner = formula[2:-1]  # Eliminar ¬¨( )
        operadores = formula_inner.split('‚à®')
        izquierda = '¬¨' + operadores[0].strip()
        derecha = '¬¨' + operadores[1].strip()
        return ('AND', izquierda, derecha)

    # Negaci√≥n de Implicaci√≥n (¬¨(ùõº ‚Üí ùõΩ)) -> ùõº ‚àß ¬¨ùõΩ - Una sola rama vertical
    elif '¬¨(' in formula and '‚Üí' in formula:
        formula_inner = formula[2:-1]  # Eliminar ¬¨( )
        operadores = formula_inner.split('‚Üí')
        izquierda = operadores[0].strip()
        derecha = '¬¨' + operadores[1].strip()
        return ('AND', izquierda, derecha)

    # Negaci√≥n de Bicondicional (¬¨(ùõº ‚Üî ùõΩ)) -> (ùõº ‚àß ¬¨ùõΩ) ‚à® (ùõΩ ‚àß ¬¨ùõº) - Dos ramas
    elif '¬¨(' in formula and '‚Üî' in formula:
        formula_inner = formula[2:-1]  # Eliminar ¬¨( )
        operadores = formula_inner.split('‚Üî')
        izquierda = operadores[0].strip()
        derecha = operadores[1].strip()
        return ('OR', ('AND', izquierda, '¬¨' + derecha), ('AND', derecha, '¬¨' + izquierda))

    # Doble Negaci√≥n (¬¨¬¨ùõº) -> ¬¨¬¨ùõº = ùõº - Una sola proposici√≥n
    elif '¬¨¬¨' in formula:
        return formula[2:].strip()  # Eliminar las dos negaciones

    # Bicondicional (ùõº ‚Üî ùõΩ) -> (ùõº ‚àß ùõΩ) ‚à® (¬¨ùõº ‚àß ¬¨ùõΩ) - Dos ramas
    elif '‚Üî' in formula:
        operadores = formula.split('‚Üî')
        izquierda = operadores[0].strip()
        derecha = operadores[1].strip()
        return ('OR', ('AND', izquierda, derecha), ('AND', '¬¨' + izquierda, '¬¨' + derecha))

    # Implicaci√≥n (ùõº ‚Üí ùõΩ) -> ¬¨ùõº ‚à® ùõΩ - Dos ramas
    elif '‚Üí' in formula:
        operadores = formula.split('‚Üí')
        izquierda = '¬¨' + operadores[0].strip()
        derecha = operadores[1].strip()
        return ('OR', izquierda, derecha)

    # Si es una proposici√≥n simple, la devolvemos tal cual
    else:
        return formula.strip()

# Funci√≥n para dibujar el √°rbol sem√°ntico seg√∫n las reglas
def dibujar_arbol_semantico(arbol, canvas, x, y, dx, dy):
    if isinstance(arbol, tuple):
        operador, izquierda, derecha = arbol
        
        # Dibuja el operador
        canvas.create_text(x, y, text=operador, font=("Arial", 12, "bold"))
        
        # Si es AND o OR (con dos ramas), generamos dos ramas
        if operador == 'AND' or operador == 'OR':  
            x_izq = x - dx
            y_izq = y + dy
            x_der = x + dx
            y_der = y + dy
            canvas.create_line(x, y, x_izq, y_izq)
            canvas.create_line(x, y, x_der, y_der)
            dibujar_arbol_semantico(izquierda, canvas, x_izq, y_izq, dx / 2, dy)
            dibujar_arbol_semantico(derecha, canvas, x_der, y_der, dx / 2, dy)
        
        # Para operadores con una sola rama (como las negaciones), solo dibujamos una l√≠nea
        else:
            x_rama = x
            y_rama = y + dy
            canvas.create_line(x, y, x_rama, y_rama)
            dibujar_arbol_semantico(izquierda, canvas, x_rama, y_rama, dx / 2, dy)

    else:
        # Si es una proposici√≥n simple, dibujarla
        canvas.create_text(x, y, text=arbol, font=("Arial", 12))

# Funci√≥n para mostrar el √°rbol sem√°ntico en la ventana
def mostrar_arbol_semantico(formula):
    ventana_arbol = tk.Toplevel()
    ventana_arbol.title("√Årbol Sem√°ntico")
    
    canvas = tk.Canvas(ventana_arbol, bg="white", width=600, height=400)
    canvas.pack(fill=tk.BOTH, expand=True)
    
    arbol = generar_arbol_semantico(formula)
    dibujar_arbol_semantico(arbol, canvas, 300, 50, 120, 60)

# Ventana principal
ventana = tk.Tk()
ventana.title("Generador de √Årbol Sem√°ntico")
entrada_formula = tk.Entry(ventana, width=50)
entrada_formula.pack(padx=10, pady=10)
boton_mostrar_arbol = tk.Button(ventana, text="Generar √Årbol Sem√°ntico", command=lambda: mostrar_arbol_semantico(entrada_formula.get()))
boton_mostrar_arbol.pack(padx=10, pady=10)
ventana.mainloop()